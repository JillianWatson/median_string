#include <iostream> 
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
#include <climits>
#include <cmath>
#include <stdexcept>
#include <unordered_map>

using namespace std;

//alphabet for creating k-mers
const vector<char> NT = {'A','C','G','T'};


// calculate hamming distance between 2 strings
int hammingDistance(const string& str1, const string& str2) {
    if(str1.length() != str2.length()) {
        throw invalid_argument("k-mers must be equal length");
    }
    int dist = 0;
    for (size_t i =0; i < str1.length(); ++i) {
        if (str1[i] != str2[i]) {
                dist++;
        }
    }
    return dist;
}

// calculate distance between k-mer and a single sequence
int distanceToSequence(const string& kmer, const string& seq) {
    int minDist = numeric_limits<int>::max();
    for (size_t i=0; i <= seq.length() - kmer.length(); i++) {
        minDist = min(minDist, hammingDistance(kmer, seq.substr(i, kmer.length())));
    }
    return minDist;
}

// calculate total distance between k-mer and all sequences
int distanceTotal(const string& kmer, const vector<string>& sequences) {
    int total = 0;
    for (const auto& seq : sequences) {
        total += distanceToSequence(kmer, seq);
    }
    return total;
}

// find most frequent substring to optimize search results
string heuristic_init(const vector<string>& sequences, int K) {
    unordered_map<string, int> substringFreq;

    for (const auto& seq : sequences) {
        for (int i = 0; i <= seq.length() - K; ++i) {
            string substring = seq.substr(i, K);
            substringFreq[substring]++;
        }
    }
    string mostFreq;
    int counter = 0;

    for (const auto& pair : substringFreq) {
        if (pair.second > counter) {
            counter = pair.second;
            mostFreq = pair.first;
        }
    }

    return mostFreq;

}

void branch_and_bound(const vector<string>& sequences, string& currentStr, string& bestStr, int& bestDistance, int iter, int K) {
    // reached final k-mer position
    if (iter == K) {
        int distance = distanceTotal(currentStr, sequences);
        if (distance < bestDistance) {
            bestDistance = distance;
            bestStr = currentStr;
        }
        return;
    }

    for (char nucleotide : NT) {
        currentStr[iter] = nucleotide;
        int lowerBound = distanceTotal(currentStr.substr(0, iter + 1), sequences);
        // lower bound not hit, continue search
        if (lowerBound < bestDistance) {
            branch_and_bound(sequences, currentStr, bestStr, bestDistance, iter + 1, K);
        }
    }


}

int main(int argc, char* argv[]) {

    if (argc !=2) {
        cerr << "Please provide one multi-sequence input file." << endl;
        return 1;
    }

    ifstream inputFile(argv[1]);

    if (!inputFile) {
        cerr << "Error: unable to open input file." << endl;
        return 1;
    }

    string line, sequence;
    vector<string> sequences;

    while (getline(inputFile, line)) {
        // check for beginning of fasta sequence
        if (line[0] == '>') {
            // if sequence exists, add to sequences vector. Then clear sequence string to parse next seq string.
            if (!sequence.empty()) {
                sequences.push_back(sequence);
                sequence.clear();
            }
        } else {
            sequence += line;
        }
    }
    if (!sequence.empty()) {
        sequences.push_back(sequence);
    }
    
    inputFile.close();
    
    // grab user input; determine length of k-mer
    int K;
    cout << "Provide desired length of k-mer: ";
    cin >> K;

    if (K <= 0 || K > 10) {
        cerr << "Error: please provide k-mer length between 1 and 9." << endl;
        return 1;
    }

    for (size_t i=0; i< sequences.size(); ++i) {
        cout << "Sequence " << i+1 << " length: " << sequences[i].length() << endl; 
    }

    string bestStr = heuristic_init(sequences, K);
    string currentStr = bestStr;
    int bestDistance = distanceTotal(bestStr, sequences);

    cout << "Initial string: " << bestStr << "distance: " <<bestDistance << endl;

    branch_and_bound(sequences, currentStr, bestStr, bestDistance, 0, K);

    cout << "best string: " << bestStr << endl;
    cout << "distance: " << bestDistance << endl;

    return 0;
}
